datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  quizzes   Quiz[]   // Relation to quizzes created by the user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String        @id @default(uuid())
  title       String
  description String?
  creatorId   String        // Foreign key to User
  creator     User          @relation(fields: [creatorId], references: [id])
  questions   Question[]    // Relation to questions
  sessions    GameSession[] // Reciprocal field for GameSession
  timeline    String[]      // Static array of question IDs for timeline
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT_INPUT
  SLIDER
  DRAG_AND_DROP
}

model Question {
  id        String     @id @default(uuid())
  text      String
  type      QuestionType
  quizId    String     // Foreign key to Quiz
  quiz      Quiz       @relation(fields: [quizId], references: [id])
  answers   Answer[]   // Relation to possible answers (for multiple choice)
  media     String?    // URL to media file (image, video, audio)
  createdAt DateTime   @default(now())
}

model Answer {
  id         String    @id @default(uuid())
  text       String?
  value      Float?    // For slider values
  questionId String    // Foreign key to Question
  question   Question  @relation(fields: [questionId], references: [id])
  isCorrect  Boolean   @default(false) // Indicates if the answer is correct
  createdAt  DateTime  @default(now())
}

model GameSession {
  id        String     @id @default(uuid())
  quizId    String     // Foreign key to Quiz
  quiz      Quiz       @relation(fields: [quizId], references: [id])
  players   Player[]   // Relation to players in the game
  status    String     @default("waiting") // e.g., "waiting", "in_progress", "finished"
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Player {
  id        String      @id @default(uuid())
  name      String
  sessionId String      // Foreign key to GameSession
  session   GameSession @relation(fields: [sessionId], references: [id])
  score     Int         @default(0)
  createdAt DateTime    @default(now())
}